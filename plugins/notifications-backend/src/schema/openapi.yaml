---
# 3.1.0 is not yet supported
openapi: 3.0.3
info:
  title: notifications
  version: "1"
  description: |
    The API surface consists of a few distinct groups of functionality. Each has a
    dedicated section below.

    > **Note:** This page only describes some of the most commonly used parts of the
    > API, and is a work in progress.

    All of the URL paths in this article are assumed to be on top of some base URL
    pointing at your notifications installation. For example, if the path given in a
    section below is `/notifications`, and the notifications is located at
    `http://localhost:7007/api/notifications` during local development, the full URL would
    be `http://localhost:7007/api/notifications/notifications`. The actual URL may vary from
    one organization to the other, especially in production, but is commonly your
    `backend.baseUrl` in your app config, plus `/api/notifications` at the end.

    Some or all of the endpoints may accept or require an `Authorization` header
    with a `Bearer` token, which should then be the Backstage token returned by the
    [`identity API`](https://backstage.io/docs/reference/core-plugin-api.identityapiref).
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact: {}
servers:
  - url: /
components:
  examples: {}
  headers: {}
  parameters:
    limit:
      name: limit
      in: query
      description: |
        Maximum number of notifications to return in the response. This parameter
        controls pagination and helps manage response size for large datasets.
      required: false
      allowReserved: true
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      examples:
        Default limit:
          value: 20
        Small batch:
          value: 10
        Large batch:
          value: 50
    offset:
      name: offset
      in: query
      description: |
        Number of notifications to skip in the query page. Used for pagination
        to retrieve subsequent pages of results.
      required: false
      allowReserved: true
      schema:
        type: integer
        minimum: 0
        default: 0
      examples:
        First page:
          value: 0
        Second page:
          value: 20
        Third page:
          value: 40
    read:
      name: read
      in: query
      description: |
        Filter notifications by read status. When specified, returns only notifications
        that match the given read state.
      required: false
      allowReserved: true
      schema:
        type: boolean
      examples:
        Unread only:
          value: false
        Read only:
          value: true
    saved:
      name: saved
      in: query
      description: |
        Filter notifications by saved status. When specified, returns only notifications
        that match the given saved state.
      required: false
      allowReserved: true
      schema:
        type: boolean
      examples:
        Unsaved only:
          value: false
        Saved only:
          value: true
    severity:
      name: severity
      in: query
      description: |
        Filter notifications by severity level. Notifications can have different
        priority levels that affect their display and handling.
      required: false
      allowReserved: true
      schema:
        type: string
        enum: [critical, high, normal, low]
      examples:
        Critical notifications:
          value: critical
        High priority:
          value: high
        Normal priority:
          value: normal
        Low priority:
          value: low
    origin:
      name: origin
      in: query
      description: |
        Filter notifications by origin. The origin identifies the source system
        or service that generated the notification.
      required: false
      allowReserved: true
      schema:
        type: string
      examples:
        From scaffolder:
          value: scaffolder
        From catalog:
          value: catalog
        From techdocs:
          value: techdocs
    topic:
      name: topic
      in: query
      description: |
        Filter notifications by topic. Topics help categorize and group related
        notifications together.
      required: false
      allowReserved: true
      schema:
        type: string
      examples:
        Security alerts:
          value: security
        Deployment updates:
          value: deployment
        System maintenance:
          value: maintenance
    orderBy:
      name: orderBy
      in: query
      description: |
        Sort order for notifications. Determines which field is used to sort
        the results.
      required: false
      allowReserved: true
      schema:
        type: string
        enum: [created, updated, read, saved]
        default: created
      examples:
        Sort by creation time:
          value: created
        Sort by last update:
          value: updated
        Sort by read status:
          value: read
        Sort by saved status:
          value: saved
    orderDirection:
      name: orderDirection
      in: query
      description: |
        Sort direction for notifications. Controls whether results are returned
        in ascending or descending order.
      required: false
      allowReserved: true
      schema:
        type: string
        enum: [asc, desc]
        default: desc
      examples:
        Newest first:
          value: desc
        Oldest first:
          value: asc
    notificationId:
      name: id
      in: path
      description: |
        Unique identifier for the notification. Used to retrieve, update, or
        delete specific notifications.
      required: true
      allowReserved: true
      schema:
        type: string
        minLength: 1
      examples:
        Sample notification ID:
          value: "notif-12345-abcde"
  requestBodies: {}
  responses:
    ErrorResponse:
      description: An error response from the backend.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
            stack:
              type: string
            code:
              type: string
          required:
            - name
            - message
        request:
          type: object
          properties:
            method:
              type: string
            url:
              type: string
          required:
            - method
            - url
        response:
          type: object
          properties:
            statusCode:
              type: number
          required:
            - statusCode
      required:
        - error
        - response
      additionalProperties: {}
    NotificationPayload:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: |
            The main title of the notification. This is the primary text that
            users will see and should be concise but descriptive.
          example: "Deployment completed successfully"
        description:
          type: string
          description: |
            Optional longer description for the notification. Provides additional
            context and details about the notification.
          example: "The deployment of service 'user-service' to production has completed successfully at 2024-01-15T10:30:00Z"
        link:
          type: string
          description: |
            Optional link where the notification is pointing to. This can be
            a URL to related documentation, logs, or action items.
          example: "https://backstage.example.com/catalog/default/component/user-service"
        severity:
          type: string
          enum: [critical, high, normal, low]
          description: |
            Notification severity levels that indicate the importance and urgency
            of the notification. Critical notifications typically require immediate
            attention, while low priority notifications are informational.
          # example: normal
        topic:
          type: string
          description: |
            Optional notification topic that helps categorize and group related
            notifications together.
          example: "deployment"
        scope:
          type: string
          description: |
            Notification scope, can be used to re-send same notifications in case
            the scope and origin matches. This prevents duplicate notifications
            for the same event.
          example: "deployment:user-service:prod"
        icon:
          type: string
          description: |
            Optional notification icon that can be used for visual representation
            in the UI.
          example: "check-circle"

    Notification:
      type: object
      required:
        - id
        - user
        - created
        - origin
        - payload
      properties:
        id:
          type: string
          description: |
            Unique identifier for the notification. This ID is used for all
            operations on the notification including updates and deletions.
          example: "notif-12345-abcde"
        user:
          type: string
          nullable: true
          description: |
            The user entity reference that the notification is targeted to or null
            for broadcast notifications. When null, the notification is sent to
            all users or a specific group.
          example: "user:default/johndoe"
        created:
          type: string
          format: date-time
          description: |
            Notification creation date. This timestamp indicates when the
            notification was first created and sent.
          example: "2024-01-15T10:30:00Z"
        saved:
          type: string
          format: date-time
          nullable: true
          description: |
            If user has saved the notification, the date when it was saved.
            This allows users to bookmark important notifications for later reference.
          example: "2024-01-15T11:00:00Z"
        read:
          type: string
          format: date-time
          nullable: true
          description: |
            If user has read the notification, the date when it was read.
            This helps track user engagement with notifications.
          example: "2024-01-15T10:35:00Z"
        updated:
          type: string
          format: date-time
          nullable: true
          description: |
            If the notification has been updated due to it being in the same scope
            and from same origin as previous notification, the date when it was updated.
            This prevents duplicate notifications for the same event.
          example: "2024-01-15T10:32:00Z"
        origin:
          type: string
          description: |
            Origin of the notification as in the reference to sender. This identifies
            the system or service that generated the notification.
          example: "scaffolder"
        payload:
          $ref: "#/components/schemas/NotificationPayload"

    NotificationStatus:
      type: object
      required:
        - unread
        - read
      properties:
        unread:
          type: integer
          description: |
            Total number of unread notifications for the user. This count is used
            to display notification badges and indicators in the UI.
          example: 5
        read:
          type: integer
          description: |
            Total number of read notifications for the user. This helps track
            user engagement and notification history.
          example: 42

    TopicSetting:
      type: object
      required:
        - id
        - enabled
      properties:
        id:
          type: string
          description: |
            Topic ID that uniquely identifies the notification topic.
          example: "deployment"
        enabled:
          type: boolean
          description: |
            Whether the topic is enabled for the user. Users can disable
            specific topics to reduce notification noise.
          example: true

    OriginSetting:
      type: object
      required:
        - id
        - enabled
      properties:
        id:
          type: string
          description: |
            Origin ID that uniquely identifies the notification source.
          example: "scaffolder"
        enabled:
          type: boolean
          description: |
            Whether the origin is enabled for the user. Users can disable
            specific origins to reduce notification noise.
          example: true
        topics:
          type: array
          items:
            $ref: "#/components/schemas/TopicSetting"
          description: |
            Topic settings for this origin. Allows fine-grained control over
            which topics from this origin are enabled.

    ChannelSetting:
      type: object
      required:
        - id
        - origins
      properties:
        id:
          type: string
          description: |
            Channel ID that uniquely identifies the notification channel.
          example: "email"
        origins:
          type: array
          items:
            $ref: "#/components/schemas/OriginSetting"
          description: |
            Origin settings for this channel. Allows users to configure
            which origins can send notifications through this channel.

    NotificationSettings:
      type: object
      required:
        - channels
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ChannelSetting"
          description: |
            Channel settings that define how and where notifications are delivered
            to the user.

    NotificationRecipients:
      oneOf:
        - type: object
          required:
            - type
            - entityRef
          properties:
            type:
              type: string
              enum: [entity]
              description: |
                Type of recipients indicating that notifications should be sent
                to specific entity references.
            entityRef:
              oneOf:
                - type: string
                  description: Single entity reference
                  example: "user:default/johndoe"
                - type: array
                  items:
                    type: string
                  description: Multiple entity references
                  example: ["user:default/johndoe", "user:default/janedoe"]
              description: |
                Entity references to send the notifications to. Can be a single
                reference or an array of references.
            excludeEntityRef:
              oneOf:
                - type: string
                  description: Single entity reference to exclude
                  example: "user:default/admin"
                - type: array
                  items:
                    type: string
                  description: Multiple entity references to exclude
                  example: ["user:default/admin", "user:default/system"]
              description: |
                Optional entity reference(s) to filter out of the resolved recipients.
                This allows excluding specific users from receiving notifications.
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: [broadcast]
              description: |
                Type of recipients indicating that notifications should be sent
                to all users (broadcast).

    NotificationSendOptions:
      type: object
      required:
        - recipients
        - payload
      properties:
        recipients:
          $ref: "#/components/schemas/NotificationRecipients"
        payload:
          $ref: "#/components/schemas/NotificationPayload"

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      description: Bearer token authentication for users & services
      bearerFormat: JWT

paths:
  /:
    get:
      operationId: GetNotificationsDeprecated
      deprecated: true
      summary: List notifications (deprecated)
      description: |
        Get a list of notifications for the authenticated user. This endpoint is
        deprecated and should not be used in new implementations. Use `/notifications`
        instead.
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/read"
        - $ref: "#/components/parameters/saved"
        - $ref: "#/components/parameters/severity"
        - $ref: "#/components/parameters/origin"
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/orderDirection"
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"
    post:
      operationId: CreateNotificationsDeprecated
      deprecated: true
      summary: Create notifications (deprecated)
      description: |
        Create and send notifications to recipients. This endpoint is deprecated
        and should not be used in new implementations. Use `/notifications` instead.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSendOptions"
      responses:
        "200":
          description: Created notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /notifications:
    get:
      operationId: GetNotifications
      summary: List notifications
      description: |
        Get a list of notifications for the authenticated user. Supports filtering,
        pagination, and sorting to help users find relevant notifications quickly.
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/read"
        - $ref: "#/components/parameters/saved"
        - $ref: "#/components/parameters/severity"
        - $ref: "#/components/parameters/origin"
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/orderDirection"
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"
    post:
      operationId: CreateNotifications
      summary: Create notifications
      description: |
        Create and send notifications to recipients.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSendOptions"
      responses:
        "200":
          description: Created notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /{id}:
    get:
      operationId: GetNotificationByIdDeprecated
      deprecated: true
      summary: Get notification by ID (deprecated)
      description: |
        Get a specific notification by its ID. This endpoint is deprecated and
        should not be used in new implementations. Use `/notifications/{id}` instead.
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/notificationId"
      responses:
        "200":
          description: Notification details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "404":
          description: Notification not found
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /notifications/{id}:
    get:
      operationId: GetNotificationById
      summary: Get notification by ID
      description: |
        Get a specific notification by its ID.
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/notificationId"
      responses:
        "200":
          description: Notification details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "404":
          description: Notification not found
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /update:
    post:
      operationId: UpdateNotificationsDeprecated
      deprecated: true
      summary: Update notifications (deprecated)
      description: |
        Mark notifications as read/unread or saved/unsaved. This endpoint is
        deprecated and should not be used in new implementations. Use
        `/notifications/update` instead.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to update
                  example: ["notif-12345-abcde", "notif-67890-fghij"]
                read:
                  type: boolean
                  description: Mark as read (true) or unread (false)
                  example: true
                saved:
                  type: boolean
                  description: Mark as saved (true) or unsaved (false)
                  example: false
      responses:
        "200":
          description: Updated notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /notifications/update:
    post:
      operationId: UpdateNotifications
      summary: Update notifications
      description: |
        Mark notifications as read/unread or saved/unsaved.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to update
                  example: ["notif-12345-abcde", "notif-67890-fghij"]
                read:
                  type: boolean
                  description: Mark as read (true) or unread (false)
                  example: true
                saved:
                  type: boolean
                  description: Mark as saved (true) or unsaved (false)
                  example: false
      responses:
        "200":
          description: Updated notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /status:
    get:
      operationId: GetNotificationStatus
      summary: Get notification status
      description: |
        Get notification status (read/unread counts) for the authenticated user.
      security:
        - JWT: []
      responses:
        "200":
          description: Notification status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationStatus"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /settings:
    get:
      operationId: GetNotificationSettings
      summary: Get notification settings
      description: |
        Get notification settings for the authenticated user.
      security:
        - JWT: []
      responses:
        "200":
          description: Notification settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"
    post:
      operationId: UpdateNotificationSettings
      summary: Update notification settings
      description: |
        Update notification settings for the authenticated user.
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettings"
      responses:
        "200":
          description: Updated notification settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /topics:
    get:
      operationId: GetNotificationTopics
      summary: List notification topics
      description: |
        Get a list of notification topics for the authenticated user.
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/origin"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/orderDirection"
      responses:
        "200":
          description: List of notification topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                      description: Topic name
                      example: "deployment"
                    count:
                      type: integer
                      description: Number of notifications in this topic
                      example: 15
                    origin:
                      type: string
                      description: Origin of the topic
                      example: "scaffolder"
        "401":
          description: Unauthorized
        "500":
          $ref: "#/components/responses/ErrorResponse"
