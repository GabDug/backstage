---
# 3.1.0 is not yet supported
openapi: 3.0.3
info:
  title: notifications
  version: 1.0.0
  description: |
    Backstage Notifications Backend API

    All of the URL paths in this article are assumed to be on top of some base URL
    pointing at your notifications installation. For example, if the path given in a
    section below is `/notifications`, and the notifications is located at
    `http://localhost:7007/api/notifications` during local development, the full URL would
    be `http://localhost:7007/api/notifications/notifications`. The actual URL may vary from
    one organization to the other, especially in production, but is commonly your
    `backend.baseUrl` in your app config, plus `/api/notifications` at the end.

    Some or all of the endpoints may accept or require an `Authorization` header
    with a `Bearer` token, which should then be the Backstage token returned by the
    [`identity API`](https://backstage.io/docs/reference/core-plugin-api.identityapiref).
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  contact: {}
servers:
  - url: /
paths:
  /:
    get:
      operationId: listNotificationsDeprecated
      deprecated: true
      summary: List notifications (deprecated)
      description: Get a list of notifications for the authenticated user (deprecated, use /notifications)
      security:
        - httpAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of notifications to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of notifications to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: read
          in: query
          description: Filter by read status
          schema:
            type: boolean
        - name: saved
          in: query
          description: Filter by saved status
          schema:
            type: boolean
        - name: severity
          in: query
          description: Filter by severity
          schema:
            type: string
            enum: [critical, high, normal, low]
        - name: origin
          in: query
          description: Filter by origin
          schema:
            type: string
        - name: topic
          in: query
          description: Filter by topic
          schema:
            type: string
        - name: orderBy
          in: query
          description: Sort order for notifications
          schema:
            type: string
            enum: [created, updated, read, saved]
            default: created
        - name: orderDirection
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    post:
      operationId: createNotifications
      deprecated: true
      summary: Create notifications (deprecated)
      description: Create and send notifications to recipients (deprecated, use /notifications)
      security:
        - serviceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSendOptions"
      responses:
        "200":
          description: Created notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /notifications:
    get:
      operationId: listNotifications
      summary: List notifications
      description: Get a list of notifications for the authenticated user
      security:
        - httpAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of notifications to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of notifications to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: read
          in: query
          description: Filter by read status
          schema:
            type: boolean
        - name: saved
          in: query
          description: Filter by saved status
          schema:
            type: boolean
        - name: severity
          in: query
          description: Filter by severity
          schema:
            type: string
            enum: [critical, high, normal, low]
        - name: origin
          in: query
          description: Filter by origin
          schema:
            type: string
        - name: topic
          in: query
          description: Filter by topic
          schema:
            type: string
        - name: orderBy
          in: query
          description: Sort order for notifications
          schema:
            type: string
            enum: [created, updated, read, saved]
            default: created
        - name: orderDirection
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    post:
      operationId: createNotificationsDeprecated
      deprecated: true
      summary: Create notifications
      description: Create and send notifications to recipients
      security:
        - serviceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSendOptions"
      responses:
        "200":
          description: Created notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /{id}:
    get:
      operationId: getNotificationByIdDeprecated
      deprecated: true
      summary: Get notification by ID (deprecated)
      description: Get a specific notification by its ID (deprecated, use /notifications/{id})
      security:
        - httpAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
      responses:
        "200":
          description: Notification details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "404":
          description: Notification not found
        "500":
          description: Internal server error

  /notifications/{id}:
    get:
      operationId: getNotificationById
      deprecated: true
      summary: Get notification by ID
      description: Get a specific notification by its ID
      security:
        - httpAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
      responses:
        "200":
          description: Notification details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "401":
          description: Unauthorized
        "404":
          description: Notification not found
        "500":
          description: Internal server error

  /update:
    post:
      operationId: updateNotificationsDeprecated
      deprecated: true
      summary: Update notifications (deprecated)
      description: Mark notifications as read/unread or saved/unsaved (deprecated, use /notifications/update)
      security:
        - httpAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to update
                read:
                  type: boolean
                  description: Mark as read (true) or unread (false)
                saved:
                  type: boolean
                  description: Mark as saved (true) or unsaved (false)
      responses:
        "200":
          description: Updated notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /notifications/update:
    post:
      operationId: updateNotifications
      deprecated: true
      summary: Update notifications
      description: Mark notifications as read/unread or saved/unsaved
      security:
        - httpAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                  description: Array of notification IDs to update
                read:
                  type: boolean
                  description: Mark as read (true) or unread (false)
                saved:
                  type: boolean
                  description: Mark as saved (true) or unsaved (false)
      responses:
        "200":
          description: Updated notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /status:
    get:
      operationId: getNotificationStatus
      deprecated: true
      summary: Get notification status
      description: Get notification status (read/unread counts) for the authenticated user
      security:
        - httpAuth: []
      responses:
        "200":
          description: Notification status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationStatus"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /settings:
    get:
      operationId: getNotificationSettings
      deprecated: true
      summary: Get notification settings
      description: Get notification settings for the authenticated user
      security:
        - httpAuth: []
      responses:
        "200":
          description: Notification settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error
    post:
      operationId: updateNotificationSettings
      deprecated: true
      summary: Update notification settings
      description: Update notification settings for the authenticated user
      security:
        - httpAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationSettings"
      responses:
        "200":
          description: Updated notification settings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationSettings"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /topics:
    get:
      operationId: listNotificationTopics
      deprecated: true
      summary: List notification topics
      description: Get a list of notification topics for the authenticated user
      security:
        - httpAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of topics to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of topics to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: origin
          in: query
          description: Filter by origin
          schema:
            type: string
        - name: orderBy
          in: query
          description: Sort order for topics
          schema:
            type: string
            enum: [topic, count]
            default: count
        - name: orderDirection
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        "200":
          description: List of notification topics
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    topic:
                      type: string
                      description: Topic name
                    count:
                      type: integer
                      description: Number of notifications in this topic
                    origin:
                      type: string
                      description: Origin of the topic
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

components:
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication for users
    serviceAuth:
      type: http
      scheme: bearer
      description: Bearer token authentication for services

  schemas:
    NotificationSeverity:
      type: string
      # enum: [critical, high, normal, low]
      # description: Notification severity levels
      # example: critical

    NotificationPayload:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Notification title
        description:
          type: string
          description: Optional longer description for the notification
        link:
          type: string
          description: Optional link where the notification is pointing to
        severity:
          # $ref: "#/components/schemas/NotificationSeverity"
          type: string
          enum: [critical, high, normal, low]
          # description: Notification severity levels
        topic:
          type: string
          description: Optional notification topic
        scope:
          type: string
          description: Notification scope, can be used to re-send same notifications in case the scope and origin matches
        icon:
          type: string
          description: Optional notification icon

    Notification:
      type: object
      required:
        - id
        - user
        - created
        - origin
        - payload
      properties:
        id:
          type: string
          description: Unique identifier for the notification
        user:
          type: string
          nullable: true
          description: The user entity reference that the notification is targeted to or null for broadcast notifications
        created:
          type: string
          format: date-time
          description: Notification creation date
        saved:
          type: string
          format: date-time
          nullable: true
          description: If user has saved the notification, the date when it was saved
        read:
          type: string
          format: date-time
          nullable: true
          description: If user has read the notification, the date when it was read
        updated:
          type: string
          format: date-time
          nullable: true
          description: If the notification has been updated due to it being in the same scope and from same origin as previous notification, the date when it was updated
        origin:
          type: string
          description: Origin of the notification as in the reference to sender
        payload:
          $ref: "#/components/schemas/NotificationPayload"

    NotificationStatus:
      type: object
      required:
        - unread
        - read
      properties:
        unread:
          type: integer
          description: Total number of unread notifications for the user
        read:
          type: integer
          description: Total number of read notifications for the user

    TopicSetting:
      type: object
      required:
        - id
        - enabled
      properties:
        id:
          type: string
          description: Topic ID
        enabled:
          type: boolean
          description: Whether the topic is enabled

    OriginSetting:
      type: object
      required:
        - id
        - enabled
      properties:
        id:
          type: string
          description: Origin ID
        enabled:
          type: boolean
          description: Whether the origin is enabled
        topics:
          type: array
          items:
            $ref: "#/components/schemas/TopicSetting"
          description: Topic settings for this origin

    ChannelSetting:
      type: object
      required:
        - id
        - origins
      properties:
        id:
          type: string
          description: Channel ID
        origins:
          type: array
          items:
            $ref: "#/components/schemas/OriginSetting"
          description: Origin settings for this channel

    NotificationSettings:
      type: object
      required:
        - channels
      properties:
        channels:
          type: array
          items:
            $ref: "#/components/schemas/ChannelSetting"
          description: Channel settings

    NotificationRecipients:
      oneOf:
        - type: object
          required:
            - type
            - entityRef
          properties:
            type:
              type: string
              enum: [entity]
              description: Type of recipients
            entityRef:
              oneOf:
                - type: string
                  description: Single entity reference
                - type: array
                  items:
                    type: string
                  description: Multiple entity references
              description: Entity references to send the notifications to
            excludeEntityRef:
              oneOf:
                - type: string
                  description: Single entity reference to exclude
                - type: array
                  items:
                    type: string
                  description: Multiple entity references to exclude
              description: Optional entity reference(s) to filter out of the resolved recipients
        - type: object
          required:
            - type
          properties:
            type:
              type: string
              enum: [broadcast]
              description: Type of recipients

    NotificationSendOptions:
      type: object
      required:
        - recipients
        - payload
      properties:
        recipients:
          $ref: "#/components/schemas/NotificationRecipients"
        payload:
          $ref: "#/components/schemas/NotificationPayload"
